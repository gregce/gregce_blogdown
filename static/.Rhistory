c <- strsplit(st,split = " ")
c
c[[1]]
c[[1]][1]
c[[1]][2]
c[[1]][3]
c <- unlist(strsplit(st,split = " "))
c
c
c[1]
c[2]
library(stringi)
libs<-c("dplyr","stringr","stringi")
sentiment <- function(text {
stringi::stri_enc_detect(text)
}
sentiment <- function(text) {
stringi::stri_enc_detect(text)
}
sentiment("This is an example string")
sentiment <- function(text) {
stringi::stri_enc_isutf8(text)
}
sentiment("This is an example string")
sentiment <- function(text) {
if ((!(stringi::stri_enc_isutf8(text))) & (!(stringi::stri_enc_isascii(text)))) {
text <- stri_enc_toutf8(text)
}
}
sentiment("This is an example string")
sentiment <- function(text) {
if ((!(stringi::stri_enc_isutf8(text))) & (!(stringi::stri_enc_isascii(text)))) {
text <- stri_enc_toutf8(text)
print(text)
}
}
sentiment("This is an example string")
sentiment <- function(text) {
if ((!(stringi::stri_enc_isutf8(text))) & (!(stringi::stri_enc_isascii(text)))) {
text <- stri_enc_toutf8(text)
print(text)
}
}
sentiment("This is an ﷜﷝exampl﷜﷝e string"
sentiment <- function(text) {
if ((!(stringi::stri_enc_isutf8(text))) & (!(stringi::stri_enc_isascii(text)))) {
text <- stri_enc_toutf8(text)
print(text)
}
}
sentiment <- function(text) {
if ((!(stringi::stri_enc_isutf8(text))) & (!(stringi::stri_enc_isascii(text)))) {
text <- stri_enc_toutf8(text)
print(text)
}
}
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number()) %>%
ungroup()
View(original_books)
tidy_books <- original_books %>%
unnest_tokens(word, text)
View(tidy_books)
?unnest_tokens
seq_along
?seq_along
install.packages("git2r")
libgit2_features()
git2r::libgit2_features()
git2r::libgit2_features()
remove.packages("git2r", lib)
remove.packages("git2r")
remove.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
git2r::libgit2_features()
remove.packages("git2r", "/Users/gregce/Library/R/3.2/library")
remove.packages("git2r", "/Users/gregce/Library/R/3.2/library")
library(autoCaret)
autoCaret:::autoCaretUI()
library(mlbench)
data(Sonar)
autoCaret:::autoCaretUI()
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
packageVersion("plotly")
rm(list=ls())
autoCaret:::autoCaretUI()
library(mlbench)
data(Sonar)
autoCaret:::autoCaretUI()
library(plotly)
autoCaret:::autoCaretUI()
autoCaret:::autoCaretUI()
rm(list = ls())
autoCaret:::autoCaretUI()
library(mlbench)
data(Sonar)
autoCaret:::autoCaretUI()
getwd()
#clear workspace
rm(list=ls())
#load library
library(autoCaret)
Sonar <- autoCaret::sonar_train
dplyr::glimpse(Sonar)
mod <- autoCaret::autoModel(Sonar, Class)
New_Sonar <- autoCaret::sonar_test
preds <- predict(mod, newdata="New_Sonar")
preds <- predict(mod, newdata=New_Sonar)
caret::confusionMatrix(data = preds, reference = new$Class)
caret::confusionMatrix(data = preds, reference = New_Sonar$Class)
output <- summary(mod)
rm(mod, output, preds)
autoCaretUI()
rm(list=ls())
rm(list=ls())
library(autoCaret)
Sonar <- autoCaret::sonar_train
New_Sonar <- autoCaret::sonar_test
dplyr::glimpse(Sonar)
mod <- autoCaret::autoModel(Sonar, Class)
output <- summary(mod)
output
preds <- predict(mod, newdata=New_Sonar)
preds
caret::confusionMatrix(data = preds, reference = New_Sonar$Class)
rm(mod, output, preds)
autoCaret:::autoCaretUI()
rm(list=ls())
rm(list=ls())
library(autoCaret)
vignette("autoCaret")
Sonar <- autoCaret::sonar_train
New_Sonar <- autoCaret::sonar_test
dplyr::glimpse(Sonar)
mod <- autoCaret::autoModel(Sonar, Class)
output <- summary(mod)
output
caret::confusionMatrix(data = preds, reference = New_Sonar$Class)
preds <- predict(mod, newdata=New_Sonar)
caret::confusionMatrix(data = preds, reference = New_Sonar$Class)
rm(mod, output, preds)
autoCaret:::autoCaretUI()
rm(list=ls())
library(autoCaret)
#load data from autoCaret
Sonar <- autoCaret::sonar_train
New_Sonar <- autoCaret::sonar_test
dplyr::glimpse(Sonar)
mod <- autoCaret::autoModel(Sonar, Class)
output <- summary(mod)
output
preds <- predict(mod, newdata=New_Sonar)
caret::confusionMatrix(data = preds, reference = New_Sonar$Class)
rm(mod, output, preds)
ggedit:::ggeditAddin()
autoCaret:::autoCaretUI()
rm(list=ls())
#clear workspace
rm(list=ls())
#####################
# CLI Demo
#####################
#load library
library(autoCaret)
rm(list=ls())
rm(list=ls())
library(readr)
library(ggplot2)
library(dplyr)
library(dropboxeR)
library(data.table)
library(sqldf)
library(stringr)
library(scales)
getwd()
d <- readr::read_csv("../Data/gregce.all_support_insight2.csv", progress = FALSE)
f <- Vectorize(utilities.find_str_index_position)
# modify the data to identify account ownership relevant stuff
d_last_six <- d %>%
mutate(day = as.Date(day)
,is_t3_escalation = ifelse(grepl("T3",escalations),1,0)
, issue_type_name_shortened = substr(issue_type_name, f(issue_type_name, ":")+3, nchar(issue_type_name))
##,issue_type_account_ownership = ifelse((grepl("account", issue_type_name) & grep("Security", issue_type_name)), 1, 0)
, issue_tye_account_ownership = if_else(issue_type_name %in% c("Access and Security :: User cannot access their account", "Access and Security :: User lost their password or needs to reset it", "Access and Security :: User needs help setting up or using two factor authentication (2FA)", "Access and Security :: User would like modify access to their account", "Access and Security :: User was victim of a malicious scheme: hacking, phishing, etc."),1,0)
,  sum_col = 1) %>%
dplyr::select(is_t3_escalation,
ticket_id,
day,
current_state,
division,
num_touches,
region, contains("issue_type"), contains("metrics"), sum_col, ticket_platform) %>%
filter(day >= as.Date(dropboxeR::utilities.datesub("2017-01-18", "mon", 6)))
d_access_and_security <-  d_last_six %>% filter(issue_type_category == "Access and Security")
summarized_to_graph <- d_access_and_security %>%
mutate(cat = if_else(issue_tye_account_ownership==1,"Account Ownership", "Other Access & Security Issue"))) %>%
summarized_to_graph <- d_access_and_security %>%
mutate(cat = if_else(issue_tye_account_ownership==1,"Account Ownership", "Other Access & Security Issue")) %>%
group_by(cat) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
mutate(cat = factor(cat, cat)) %>%   # reset factor
ungroup() %>%
mutate(fraction = n / sum(n)) %>%
arrange(fraction) %>%
mutate(ymax = cumsum(fraction)
, ymin = c(0, head(ymax, n=-1)))
summarized_to_graph <- d_access_and_security %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Access & Security Issue")) %>%
group_by(cat) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
mutate(cat = factor(cat, cat)) %>%   # reset factor
ungroup() %>%
mutate(fraction = n / sum(n)) %>%
arrange(fraction) %>%
mutate(ymax = cumsum(fraction)
, ymin = c(0, head(ymax, n=-1)))
f <- Vectorize(utilities.find_str_index_position)
# modify the data to identify account ownership relevant stuff
d_last_six <- d %>%
mutate(day = as.Date(day)
,is_t3_escalation = ifelse(grepl("T3",escalations),1,0)
, issue_type_name_shortened = substr(issue_type_name, f(issue_type_name, ":")+3, nchar(issue_type_name))
##,issue_type_account_ownership = ifelse((grepl("account", issue_type_name) & grep("Security", issue_type_name)), 1, 0)
, issue_type_account_ownership = if_else(issue_type_name %in% c("Access and Security :: User cannot access their account", "Access and Security :: User lost their password or needs to reset it", "Access and Security :: User needs help setting up or using two factor authentication (2FA)", "Access and Security :: User would like modify access to their account", "Access and Security :: User was victim of a malicious scheme: hacking, phishing, etc."),1,0)
,  sum_col = 1) %>%
dplyr::select(is_t3_escalation,
ticket_id,
day,
current_state,
division,
num_touches,
region, contains("issue_type"), contains("metrics"), sum_col, ticket_platform) %>%
filter(day >= as.Date(dropboxeR::utilities.datesub("2017-01-18", "mon", 6)))
# just those support requests pertaining to Productivity
d_access_and_security <-  d_last_six %>% filter(issue_type_category == "Access and Security")
# summarize support requests
summarized_to_graph <- d_access_and_security %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Access & Security Issue")) %>%
group_by(cat) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
mutate(cat = factor(cat, cat)) %>%   # reset factor
ungroup() %>%
mutate(fraction = n / sum(n)) %>%
arrange(fraction) %>%
mutate(ymax = cumsum(fraction)
, ymin = c(0, head(ymax, n=-1)))
p01 <- ggplot(summarized_to_graph, aes(x=cat, y=fraction, fill=cat)) +
geom_bar(stat = "identity") +
theme_dropboxer() +
scale_fill_manual(values=dropbox_color_discrete) +
scale_y_continuous(labels=percent) +
labs(fill = "Category", title = "Productivity Support Requests - Last 6 Months") +
ylab("Percentage of problems") +
theme(panel.grid=element_blank()
, axis.title.x = element_blank()
, axis.text.x = element_blank())
p01
p01
View(summarized_to_graph)
ggplot(summarized_to_graph, aes(x=cat, y=fraction, fill=cat)) +
geom_bar(stat = "identity") +
theme_dropboxer() +
scale_fill_manual(values=dropbox_color_discrete) +
scale_y_continuous(labels=percent) +
labs(fill = "Category", title = "Productivity Support Requests - Last 6 Months") +
ylab("Percentage of problems") +
theme(panel.grid=element_blank()
, axis.title.x = element_blank()
, axis.text.x = element_blank())
ggplot(summarized_to_graph, aes(x=cat, y=fraction, fill=cat)) +
geom_bar(stat = "identity")
summarized_to_graph <- d_last_six %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Access & Security Issue")) %>%
group_by(cat) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
mutate(cat = factor(cat, cat)) %>%   # reset factor
ungroup() %>%
mutate(fraction = n / sum(n)) %>%
arrange(fraction) %>%
mutate(ymax = cumsum(fraction)
, ymin = c(0, head(ymax, n=-1)))
View(summarized_to_graph)
summarized_to_graph <- d_last_six %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Customer Issue")) %>%
group_by(cat) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
mutate(cat = factor(cat, cat)) %>%   # reset factor
ungroup() %>%
mutate(fraction = n / sum(n)) %>%
arrange(fraction) %>%
mutate(ymax = cumsum(fraction)
, ymin = c(0, head(ymax, n=-1)))
p02 <-  ggplot(summarized_to_graph, aes(fill=cat, ymax=ymax, ymin=ymin, xmax=3.5, xmin=2)) +
geom_rect() +
theme_dropboxer() +
coord_polar(theta="y") +
scale_fill_manual(values=dropbox_color_discrete) +
labs(fill = "Category") +
xlim(c(0, 4)) +
theme(panel.grid=element_blank()
, axis.text=element_blank()
,axis.line = element_blank()
,axis.ticks=element_blank())
p02
multiplot <- function(..., plotlist=NULL, cols) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
install.packages("gganimate")
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
library(gganimate)
View(d_last_six)
library(lubridate)
d_last_six <- d %>%
mutate(day = as.Date(day)
, month = lubridate::month(day)
, is_t3_escalation = ifelse(grepl("T3",escalations),1,0)
, issue_type_name_shortened = substr(issue_type_name, f(issue_type_name, ":")+3, nchar(issue_type_name))
##,issue_type_account_ownership = ifelse((grepl("account", issue_type_name) & grep("Security", issue_type_name)), 1, 0)
, issue_type_account_ownership = if_else(issue_type_name %in% c("Access and Security :: User cannot access their account", "Access and Security :: User lost their password or needs to reset it", "Access and Security :: User needs help setting up or using two factor authentication (2FA)", "Access and Security :: User would like modify access to their account", "Access and Security :: User was victim of a malicious scheme: hacking, phishing, etc."),1,0)
,  sum_col = 1) %>%
dplyr::select(is_t3_escalation,
ticket_id,
day,
month,
current_state,
division,
num_touches,
region, contains("issue_type"), contains("metrics"), sum_col, ticket_platform) %>%
filter(day >= as.Date(dropboxeR::utilities.datesub("2017-01-18", "mon", 6)))
summarized_to_graph <- d_last_six %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Support Request")) %>%
group_by(cat, month) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
mutate(cat = factor(cat, cat)) %>%   # reset factor
ungroup() %>%
mutate(fraction = n / sum(n)) %>%
arrange(fraction) %>%
mutate(ymax = cumsum(fraction)
, ymin = c(0, head(ymax, n=-1)))
summarized_to_graph <- d_last_six %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Support Request")) %>%
group_by(cat, month) %>%
summarise(n=n())
View(summarized_to_graph)
summarized_to_graph <- d_last_six %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Support Request")) %>%
group_by(cat, month) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
mutate(cat = factor(cat, cat)) %>%   # reset factor
ungroup()
summarized_to_graph <- d_last_six %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Support Request")) %>%
group_by(cat, month) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
#mutate(cat = factor(cat, cat)) %>%   # reset factor
ungroup() %>%
mutate(fraction = n / sum(n))
View(summarized_to_graph)
summarized_to_graph <- d_last_six %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Support Request")) %>%
group_by(cat, month) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
#mutate(cat = factor(cat, cat)) %>%   # reset factor
mutate(fraction = n / sum(n)) %>%
arrange(fraction) %>%
mutate(ymax = cumsum(fraction)
, ymin = c(0, head(ymax, n=-1)))
View(summarized_to_graph)
summarized_to_graph <- d_last_six %>%
mutate(cat = if_else(issue_type_account_ownership==1,"Account Ownership", "Other Support Request")) %>%
group_by(cat, month) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
mutate(cat = factor(cat, cat)) %>%   # reset factor
mutate(fraction = n / sum(n)) %>%
arrange(fraction) %>%
mutate(ymax = cumsum(fraction)
, ymin = c(0, head(ymax, n=-1)))
p02 <-  ggplot(summarized_to_graph, aes(fill=cat, ymax=ymax, ymin=ymin, xmax=3.5, xmin=2, frame=month)) +
geom_rect() +
theme_dropboxer() +
coord_polar(theta="y") +
scale_fill_manual(values=dropbox_color_discrete) +
labs(fill = "Category") +
xlim(c(0, 4)) +
theme(panel.grid=element_blank()
, axis.text=element_blank()
,axis.line = element_blank()
,axis.ticks=element_blank())
gganimate(p02)
p02 <-  ggplot(summarized_to_graph, aes(fill=cat, ymax=ymax, ymin=ymin, xmax=3.5, xmin=2, frame=month)) +
geom_rect() +
#theme_dropboxer() +
coord_polar(theta="y") +
scale_fill_manual(values=dropbox_color_discrete) +
labs(fill = "Category") +
xlim(c(0, 4)) +
theme(panel.grid=element_blank()
, axis.text=element_blank()
,axis.line = element_blank()
,axis.ticks=element_blank())
gganimate(p02)
p02 <-  ggplot(summarized_to_graph, aes(fill=cat, ymax=ymax, ymin=ymin, xmax=3.5, xmin=2, frame=month)) +
geom_rect()
p02 <-  ggplot(summarized_to_graph, aes(fill=cat, ymax=ymax, ymin=ymin, xmax=3.5, xmin=2, frame=month)) +
geom_rect() +
#theme_dropboxer() +
coord_polar(theta="y") +
scale_fill_manual(values=dropbox_color_discrete) +
labs(fill = "Category") +
xlim(c(0, 4))
gganimate(p02)
conflicts()
install.packages(cowplot)
install.packages("cowplot")
devtools::install_github("wilkelab/cowplot")
Sys.info()
sessionInfo()
library(mailR)
system("rm .Rhistory")
system(rm .Rhistory)
blogdown::new_site()
getwd()
setwd("gregce.github.io/")
blogdown::new_site()
blogdown::install_theme('gcushen/hugo-academic')
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
devtools::install_github('rstudio/blogdown')
devtools::install_github('rstudio/blogdown')
blogdown::new_site()
getwd()
blogdown::serve_site()
blogdown::install_theme("gcushen/hugo-academic")
blogdown::serve_site()
blogdown::install_theme("nishanths/cocoa-hugo-theme")
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_content()
blogdown::new_post()
blogdown::new_post("Getting Started with R packages")
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::install_theme("nishanths/cocoa-hugo-theme)
blogdown::install_theme("nishanths/cocoa-hugo-theme")
blogdown::install_theme("shenoybr/hugo-goa")
blogdown::serve_site()
blogdown::install_theme("rakuishi/hugo-zen")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_post("Getting Started with R packages")
blogdown::new_post("Getting Started with R packages")
blogdown::build_site()
getwd()
setwd("/Users/gregce/gregce_blogdown/")
blogdown::new_site()
blogdown::install_theme("rakuishi/hugo-zen")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_post("Building R packages")
blogdown::new_post("Building R packages", date = "2017-02-20")
